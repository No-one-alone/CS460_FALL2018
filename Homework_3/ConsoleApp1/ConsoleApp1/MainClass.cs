using System;
using System.Collections.Generic;
using System.Text;

/// <summary>
/// This namespace holds the C# equivalent of the Main.java program code and structure.
/// </summary>
namespace ConsoleApp1
{

    /// <summary>
    ///  Original by Sumit Ghosh "An Interesting Method to Generate Binary Numbers from 1 to n"/// 
    ///  at https://www.geeksforgeeks.org/interesting-method-generate-binary-numbers-1-n/
    ///
    /// Adapted for CS 460 HW3.This simple example demonstrates the rather powerful
    /// application of Breadth-First Search to enumeration of states problems.
    /// 
    /// There are easier ways to generate a list of binary values, but this technique
    /// is very general and a good one to remember for other uses.
    /// 
    /// Subsequently translated into C# equivalent file by Khorben Boyer.
    /// </summary>
    public class MainClass
    {
        /// <summary>
        /// Print the binary representation of all numbers from 1 up to n.
        /// This is accomplished by using a FIFO queue to perform a level
        /// order(i.e.BFS) traversal of a virtual binary tree that
        /// looks like this:
        ///                1
        ///             /       \
        ///           10       11
        ///          /  \     /  \
        ///        100  101  110  111
        ///         etc.
        /// and then storing each "value" in a list as it is "visited".
        /// </summary>
        /// <param name="n">integer called n</param>
        /// <returns>A linked list</returns>
        static LinkedList<string> GenerateBinaryRepresentationList(int n)
        {
            LinkedQueue<StringBuilder> q = new LinkedQueue<StringBuilder>(); //Create an empty queue of strings with which to perform the traversal.

            LinkedList<string> output = new LinkedList<string>(); // A list for returning the binary values.

            if ( n < 1)
            {
                return output;     // binary representation of negative values is not supported; return an empty list.
            }

            q.Push(new StringBuilder("1")); // Enqueue the first binary number.  Use a dynamic string to avoid string concat

            // BFS
            while (n-- > 0)
            {
                // print the front of queue
                StringBuilder sb = q.Pop();
                output.AddLast(sb.ToString());

                //  Make a copy
                StringBuilder sbc = new StringBuilder(sb.ToString());

                // Left child
                sb.Append('0');
                q.Push(sb);

                // Right child
                sbc.Append('1');
                q.Push(sbc);

            }
            return output;
        }

        /// <summary>
        /// Driver program to test above function and main program entry point.
        /// </summary>
        /// <param name="args">Takes command line arguments</param>
        public static void Main(string[] args)
        {
            int n = 10; // initializes variable.

            if(args.Length < 1) // checks if user supplied a command line argument.
            {
                // informative program use message for user.
                Console.WriteLine("Please invoke with the max value to print binary up to, like this:");
                Console.WriteLine("\t./ConsoleApp1.exe 12");

                return;
            }

            try // checks if an exception is thrown due to invalid user input.
            {
               // int.TryParse(args[0], out n);
               n = int.Parse(args[0]);
            }
     
            catch (FormatException e) // catches format type exception.
            {
                // informative error message for user.
                Console.WriteLine("I'm sorry, I can't understand the number: " + args[0]);
                return;
            }

            LinkedList<String> output = GenerateBinaryRepresentationList(n); // Calls function to make linked list with node values.
            
            int maxLength; // initializes variable.

            try // checks if list empty due to invalid numerical input from user.
            {
                maxLength = output.Last.Value.Length; // gets the length of the string value of the last node in the list.
            }
            catch(NullReferenceException) // Catches Null reference generated by an empty list.
            {
                // informative error message for user.
                Console.WriteLine("I'm sorry, I can't use the non-positive integer: " + args[0]);
                return;
            }

            // Print it right justified.  Longest string is the last one.
            // Print enough spaces to move it over the correct distance
            foreach (string item in output)
            {
                for(int i = 0; i < maxLength - item.Length; ++i)
                {
                    Console.Write(" ");
                }

                Console.WriteLine(item);
            }
        }
    }
}
